// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace SCCM.Models;

public partial class seiciochemangiContext : DbContext
{
    public seiciochemangiContext(DbContextOptions<seiciochemangiContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AbilitazioniMedicoPrestazione> AbilitazioniMedicoPrestaziones { get; set; }

    public virtual DbSet<AnagraficheClienti> AnagraficheClientis { get; set; }

    public virtual DbSet<AnagraficheGestori> AnagraficheGestoris { get; set; }

    public virtual DbSet<AnagraficheMedici> AnagraficheMedicis { get; set; }

    public virtual DbSet<Appuntamento> Appuntamentos { get; set; }

    public virtual DbSet<Audit> Audits { get; set; }

    public virtual DbSet<BachecaClienti> BachecaClientis { get; set; }

    public virtual DbSet<Capcomuni> Capcomunis { get; set; }

    public virtual DbSet<ClientiMedici> ClientiMedicis { get; set; }

    public virtual DbSet<ClientiPacchetti> ClientiPacchettis { get; set; }

    public virtual DbSet<CompensiPrestazioni> CompensiPrestazionis { get; set; }

    public virtual DbSet<CouponUtenti> CouponUtentis { get; set; }

    public virtual DbSet<DisponibilitaMedico> DisponibilitaMedicos { get; set; }

    public virtual DbSet<ExternalService> ExternalServices { get; set; }

    public virtual DbSet<Fatture> Fattures { get; set; }

    public virtual DbSet<Geoitalium> Geoitalia { get; set; }

    public virtual DbSet<LogMail> LogMails { get; set; }

    public virtual DbSet<Messaggi> Messaggis { get; set; }

    public virtual DbSet<OtpToken> OtpTokens { get; set; }

    public virtual DbSet<Pacchetti> Pacchettis { get; set; }

    public virtual DbSet<PacchettiPrestazioni> PacchettiPrestazionis { get; set; }

    public virtual DbSet<Pagamento> Pagamentos { get; set; }

    public virtual DbSet<Prestazioni> Prestazionis { get; set; }

    public virtual DbSet<PrestazioniClienti> PrestazioniClientis { get; set; }

    public virtual DbSet<QuestionarioClienti> QuestionarioClientis { get; set; }

    public virtual DbSet<StatistichePesoClienti> StatistichePesoClientis { get; set; }

    public virtual DbSet<TemplateMail> TemplateMails { get; set; }

    public virtual DbSet<TemplateMessaggi> TemplateMessaggis { get; set; }

    public virtual DbSet<Utenze> Utenzes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AbilitazioniMedicoPrestazione>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_AbilitazioniMedicoPrestazione");

            entity.ToTable("AbilitazioniMedicoPrestazione__");

            entity.Property(e => e.Abilitato).HasDefaultValue(true);
            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<AnagraficheClienti>(entity =>
        {
            entity.ToTable("AnagraficheClienti");

            entity.Property(e => e.Cap).HasDefaultValue("");
            entity.Property(e => e.Citta).HasDefaultValue("");
            entity.Property(e => e.CittaNascita).HasDefaultValue("");
            entity.Property(e => e.CodiceFiscale)
                .HasMaxLength(255)
                .HasDefaultValue("");
            entity.Property(e => e.Cognome)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Coupon).HasMaxLength(50);
            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataNascita).HasColumnType("smalldatetime");
            entity.Property(e => e.Indirizzo).HasDefaultValue("");
            entity.Property(e => e.Nazionalita).HasDefaultValue("");
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Paese).HasDefaultValue("");
            entity.Property(e => e.Privacy3).HasDefaultValue(false);
            entity.Property(e => e.ProvinciaNascita).HasDefaultValue("");
            entity.Property(e => e.Sesso).HasDefaultValue(0);
            entity.Property(e => e.Telefono).HasDefaultValue("");
            entity.Property(e => e.TokenQuestionario).IsUnicode(false);
        });

        modelBuilder.Entity<AnagraficheGestori>(entity =>
        {
            entity.ToTable("AnagraficheGestori");

            entity.Property(e => e.Cap)
                .IsRequired()
                .HasDefaultValue("");
            entity.Property(e => e.Citta)
                .IsRequired()
                .HasDefaultValue("");
            entity.Property(e => e.CodiceFiscale)
                .IsRequired()
                .HasDefaultValue("");
            entity.Property(e => e.Cognome).IsRequired();
            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataNascita).HasColumnType("smalldatetime");
            entity.Property(e => e.Indirizzo)
                .IsRequired()
                .HasDefaultValue("");
            entity.Property(e => e.Nome).IsRequired();
            entity.Property(e => e.Telefono)
                .IsRequired()
                .HasDefaultValue("");

            entity.HasOne(d => d.IdUtenzaNavigation).WithMany(p => p.AnagraficheGestoris).HasForeignKey(d => d.IdUtenza);
        });

        modelBuilder.Entity<AnagraficheMedici>(entity =>
        {
            entity.ToTable("AnagraficheMedici");

            entity.Property(e => e.Cap)
                .HasDefaultValue("")
                .HasColumnName("CAP");
            entity.Property(e => e.Cellulare)
                .IsRequired()
                .HasDefaultValue("");
            entity.Property(e => e.Citta)
                .IsRequired()
                .HasDefaultValue("");
            entity.Property(e => e.CodiceFiscalePiva)
                .HasDefaultValue("")
                .HasColumnName("CodiceFiscalePIVa");
            entity.Property(e => e.Cognome).IsRequired();
            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataNascita).HasColumnType("smalldatetime");
            entity.Property(e => e.Esperienza)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Fax).IsRequired();
            entity.Property(e => e.Indirizzo).HasDefaultValue("");
            entity.Property(e => e.Nome).IsRequired();
            entity.Property(e => e.Professione)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasDefaultValue("Medico Professionista");

            entity.HasOne(d => d.IdUtenzaNavigation).WithMany(p => p.AnagraficheMedicis).HasForeignKey(d => d.IdUtenza);
        });

        modelBuilder.Entity<Appuntamento>(entity =>
        {
            entity.ToTable("Appuntamento");

            entity.Property(e => e.Abilitato).HasDefaultValue(true);
            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataFineCliente).HasColumnType("smalldatetime");
            entity.Property(e => e.DataFineMedico).HasColumnType("smalldatetime");
            entity.Property(e => e.DataInizioCliente).HasColumnType("smalldatetime");
            entity.Property(e => e.DataInizioMedico).HasColumnType("smalldatetime");
            entity.Property(e => e.Fine).HasColumnType("smalldatetime");
            entity.Property(e => e.Inizio).HasColumnType("smalldatetime");
            entity.Property(e => e.Stato).HasDefaultValue(1);
        });

        modelBuilder.Entity<Audit>(entity =>
        {
            entity.ToTable("Audit");

            entity.Property(e => e.Azione).IsRequired();
            entity.Property(e => e.InfoAddizionali).IsRequired();
            entity.Property(e => e.Ip).IsRequired();
            entity.Property(e => e.UserAgent).IsRequired();
        });

        modelBuilder.Entity<BachecaClienti>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_BachecaCliente");

            entity.ToTable("BachecaClienti");

            entity.Property(e => e.Abilitato).HasDefaultValue(true);
            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Nota)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<Capcomuni>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("CAPComuni");

            entity.Property(e => e.Cap)
                .HasMaxLength(255)
                .HasColumnName("CAP");
            entity.Property(e => e.Comune)
                .HasMaxLength(255)
                .HasColumnName("COMUNE");
            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.Provincia)
                .HasMaxLength(255)
                .HasColumnName("PROVINCIA");
            entity.Property(e => e.Regione)
                .HasMaxLength(255)
                .HasColumnName("REGIONE");
        });

        modelBuilder.Entity<ClientiMedici>(entity =>
        {
            entity.ToTable("ClientiMedici");

            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione).HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<ClientiPacchetti>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_ClientiPacchetti_1");

            entity.ToTable("ClientiPacchetti");

            entity.Property(e => e.Abilitato).HasDefaultValue(true);
            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataScadenza)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DatiClientePacchetto)
                .IsRequired()
                .HasDefaultValue("");
            entity.Property(e => e.GuidCp)
                .HasDefaultValueSql("(newid())")
                .HasColumnName("GuidCP");
            entity.Property(e => e.GuidPacchetto).HasDefaultValueSql("(newid())");
        });

        modelBuilder.Entity<CompensiPrestazioni>(entity =>
        {
            entity.ToTable("CompensiPrestazioni");
        });

        modelBuilder.Entity<CouponUtenti>(entity =>
        {
            entity.ToTable("CouponUtenti");

            entity.Property(e => e.Abilitato).HasDefaultValue(true);
            entity.Property(e => e.CodiceCoupon)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataScadenza).HasColumnType("smalldatetime");
            entity.Property(e => e.DataUtilizzo).HasColumnType("smalldatetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<DisponibilitaMedico>(entity =>
        {
            entity.ToTable("DisponibilitaMedico");

            entity.Property(e => e.Abilitato).HasDefaultValue(true);
            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Fine).HasColumnType("smalldatetime");
            entity.Property(e => e.Inizio).HasColumnType("smalldatetime");
            entity.Property(e => e.Note)
                .IsRequired()
                .HasDefaultValue("");
        });

        modelBuilder.Entity<ExternalService>(entity =>
        {
            entity.ToTable("ExternalService");

            entity.Property(e => e.Abilitato).HasDefaultValue(true);
            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Richiesta)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("richiesta");
            entity.Property(e => e.Risposta)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("risposta");
            entity.Property(e => e.Token)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("token");
        });

        modelBuilder.Entity<Fatture>(entity =>
        {
            entity.ToTable("Fatture");

            entity.Property(e => e.Abilitato).HasDefaultValue(true);
            entity.Property(e => e.Cap).IsRequired();
            entity.Property(e => e.Citta).IsRequired();
            entity.Property(e => e.CodiceDestinatarioSdi)
                .IsRequired()
                .HasColumnName("CodiceDestinatarioSDI");
            entity.Property(e => e.CodiceFiscalePiva)
                .IsRequired()
                .HasColumnName("CodiceFiscalePIva");
            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataEmissione).HasColumnType("smalldatetime");
            entity.Property(e => e.GuidCp).HasColumnName("GuidCP");
            entity.Property(e => e.Indirizzo).IsRequired();
            entity.Property(e => e.NumeroFattura).IsRequired();
            entity.Property(e => e.Provincia)
                .IsRequired()
                .HasDefaultValue("");
            entity.Property(e => e.RagioneSociale).IsRequired();
        });

        modelBuilder.Entity<Geoitalium>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("geoitalia");

            entity.Property(e => e.CodiceCatastaleDelComune)
                .HasMaxLength(255)
                .HasColumnName("Codice Catastale del comune");
            entity.Property(e => e.CodiceComuneFormatoAlfanumerico)
                .HasMaxLength(255)
                .HasColumnName("Codice Comune formato alfanumerico");
            entity.Property(e => e.CodiceComuneFormatoNumerico).HasColumnName("Codice Comune formato numerico");
            entity.Property(e => e.CodiceComuneNumericoCon103ProvinceDal1995Al2005).HasColumnName("Codice Comune numerico con 103 province (dal 1995 al 2005)");
            entity.Property(e => e.CodiceComuneNumericoCon107ProvinceDal2006Al2009).HasColumnName("Codice Comune numerico con 107 province (dal 2006 al 2009)");
            entity.Property(e => e.CodiceComuneNumericoCon110ProvinceDal2010Al2016).HasColumnName("Codice Comune numerico con 110 province (dal 2010 al 2016)");
            entity.Property(e => e.CodiceDellUnitàTerritorialeSovracomunaleValidaAFiniSta)
                .HasMaxLength(255)
                .HasColumnName("Codice dell'Unità territoriale sovracomunale _(valida a fini sta");
            entity.Property(e => e.CodiceNuts12010)
                .HasMaxLength(255)
                .HasColumnName("Codice NUTS1 2010");
            entity.Property(e => e.CodiceNuts12021)
                .HasMaxLength(255)
                .HasColumnName("Codice NUTS1 2021");
            entity.Property(e => e.CodiceNuts220103)
                .HasMaxLength(255)
                .HasColumnName("Codice NUTS2 2010 (3) ");
            entity.Property(e => e.CodiceNuts220213)
                .HasMaxLength(255)
                .HasColumnName("Codice NUTS2 2021 (3) ");
            entity.Property(e => e.CodiceNuts32010)
                .HasMaxLength(255)
                .HasColumnName("Codice NUTS3 2010");
            entity.Property(e => e.CodiceNuts32021)
                .HasMaxLength(255)
                .HasColumnName("Codice NUTS3 2021");
            entity.Property(e => e.CodiceProvinciaStorico1)
                .HasMaxLength(255)
                .HasColumnName("Codice Provincia (Storico)(1)");
            entity.Property(e => e.CodiceRegione)
                .HasMaxLength(255)
                .HasColumnName("Codice Regione");
            entity.Property(e => e.CodiceRipartizioneGeografica).HasColumnName("Codice Ripartizione Geografica");
            entity.Property(e => e.DenominazioneAltraLingua)
                .HasMaxLength(255)
                .HasColumnName("Denominazione altra lingua");
            entity.Property(e => e.DenominazioneDellUnitàTerritorialeSovracomunaleValidaAF)
                .HasMaxLength(255)
                .HasColumnName("Denominazione dell'Unità territoriale sovracomunale _(valida a f");
            entity.Property(e => e.DenominazioneInItaliano)
                .HasMaxLength(255)
                .HasColumnName("Denominazione in italiano");
            entity.Property(e => e.DenominazioneItalianaEStraniera)
                .HasMaxLength(255)
                .HasColumnName("Denominazione (Italiana e straniera)");
            entity.Property(e => e.DenominazioneRegione)
                .HasMaxLength(255)
                .HasColumnName("Denominazione Regione");
            entity.Property(e => e.FlagComuneCapoluogoDiProvinciaCittàMetropolitanaLiberoCo).HasColumnName("Flag Comune capoluogo di provincia/città metropolitana/libero co");
            entity.Property(e => e.ProgressivoDelComune2)
                .HasMaxLength(255)
                .HasColumnName("Progressivo del Comune (2)");
            entity.Property(e => e.RipartizioneGeografica)
                .HasMaxLength(255)
                .HasColumnName("Ripartizione geografica");
            entity.Property(e => e.SiglaAutomobilistica)
                .HasMaxLength(255)
                .HasColumnName("Sigla automobilistica");
            entity.Property(e => e.TipologiaDiUnitàTerritorialeSovracomunale).HasColumnName("Tipologia di Unità territoriale sovracomunale ");
        });

        modelBuilder.Entity<LogMail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__LogMail__3214EC0773A0ABE9");

            entity.ToTable("LogMail");

            entity.Property(e => e.Cognome).HasMaxLength(100);
            entity.Property(e => e.DataInvio).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.IdEmail).HasMaxLength(100);
            entity.Property(e => e.Nome).HasMaxLength(100);
            entity.Property(e => e.Subject).HasMaxLength(100);
            entity.Property(e => e.Vista).HasMaxLength(100);
        });

        modelBuilder.Entity<Messaggi>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Messaggi");

            entity.Property(e => e.Abilitato).HasDefaultValue(true);
            entity.Property(e => e.Allegato)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataInvio)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Testo)
                .IsRequired()
                .IsUnicode(false);
        });

        modelBuilder.Entity<OtpToken>(entity =>
        {
            entity.Property(e => e.Data).IsRequired();
            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataScadenza).HasColumnType("smalldatetime");
            entity.Property(e => e.TipoToken).IsRequired();
            entity.Property(e => e.Token)
                .IsRequired()
                .HasMaxLength(450);
        });

        modelBuilder.Entity<Pacchetti>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Pacchetti");

            entity.Property(e => e.Coupon).HasMaxLength(50);
            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Dettaglio).IsUnicode(false);
            entity.Property(e => e.GuidPacchetto).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Id).ValueGeneratedOnAdd();
            entity.Property(e => e.Nome)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Prezzo).HasColumnType("decimal(18, 2)");
        });

        modelBuilder.Entity<PacchettiPrestazioni>(entity =>
        {
            entity.ToTable("PacchettiPrestazioni");

            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Quantita).HasDefaultValue(1);
        });

        modelBuilder.Entity<Pagamento>(entity =>
        {
            entity.ToTable("Pagamento");

            entity.Property(e => e.CodTrans).HasMaxLength(30);
            entity.Property(e => e.Coupon).HasMaxLength(50);
            entity.Property(e => e.EsitoDaNexi).IsUnicode(false);
        });

        modelBuilder.Entity<Prestazioni>(entity =>
        {
            entity.ToTable("Prestazioni");

            entity.Property(e => e.Abilitato).HasDefaultValue(true);
            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Nome).IsRequired();
            entity.Property(e => e.Professione)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<PrestazioniClienti>(entity =>
        {
            entity.ToTable("PrestazioniClienti");

            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataFineCliente).HasColumnType("smalldatetime");
            entity.Property(e => e.DataFineEffettivo).HasColumnType("smalldatetime");
            entity.Property(e => e.DataFineMedico).HasColumnType("smalldatetime");
            entity.Property(e => e.DataInizioCliente).HasColumnType("smalldatetime");
            entity.Property(e => e.DataInizioEffettivo)
                .HasDefaultValueSql("(NULL)")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.DataInizioMedico).HasColumnType("smalldatetime");
            entity.Property(e => e.Eseguito).HasDefaultValue(false);
            entity.Property(e => e.GuidCp).HasColumnName("GuidCP");
            entity.Property(e => e.ScadenzaPrestazione).HasColumnType("smalldatetime");
        });

        modelBuilder.Entity<QuestionarioClienti>(entity =>
        {
            entity.ToTable("QuestionarioClienti");

            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.JsonRisposta).IsUnicode(false);
        });

        modelBuilder.Entity<StatistichePesoClienti>(entity =>
        {
            entity.HasKey(e => e.IdCliente).HasName("PK__Statisti__D594664241B03BBB");

            entity.ToTable("StatistichePesoClienti");

            entity.Property(e => e.IdCliente).ValueGeneratedOnAdd();
            entity.Property(e => e.DataInserimento)
                .HasDefaultValueSql("(getutcdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.IdClienteNavigation).WithOne(p => p.StatistichePesoClienti)
                .HasForeignKey<StatistichePesoClienti>(d => d.IdCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Statistic__IdCli__40AF8DC9");
        });

        modelBuilder.Entity<TemplateMail>(entity =>
        {
            entity.ToTable("TemplateMail");

            entity.Property(e => e.NomeTemplate)
                .IsRequired()
                .HasMaxLength(250);
            entity.Property(e => e.Template).IsRequired();
        });

        modelBuilder.Entity<TemplateMessaggi>(entity =>
        {
            entity.ToTable("TemplateMessaggi");

            entity.Property(e => e.CodiceTemplate)
                .IsRequired()
                .HasMaxLength(450);
            entity.Property(e => e.Contenuto).IsRequired();
        });

        modelBuilder.Entity<Utenze>(entity =>
        {
            entity.ToTable("Utenze");

            entity.Property(e => e.ClearPassword)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.DataAggiornamento).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCancellazione).HasColumnType("smalldatetime");
            entity.Property(e => e.DataCreazione)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("smalldatetime");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.FotoProfilo).IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(300);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}